import logging

import numpy as np
import pandas as pd

logging.basicConfig(level=logging.INFO)


"""
-series rolling函数
"""
logging.info("-----------------------滑动求3列的和-sum-------------------------------")

amount = pd.Series([100, 90, 110, 150, 110, 130, 80, 90, 100, 150])


print(amount)
logging.info("---------------type of rolling--------------")

print(type(amount.rolling(3)))

logging.info("---------------rolling_sum--------------")

print(amount.rolling(3).sum())  # amount.rolling(3)相当于创建了一个长度为3的窗口，窗口的数据滑动3格
"""
0      NaN  	# 窗口不足3个
1      NaN  	# 窗口不足3个
2    300.0  	# 100 + 90 + 110
3    350.0  	# 90 + 110 + 150
4    370.0  	# 110 + 150 + 110
5    390.0  	# 150 + 110 + 130
6    320.0  	# 110 + 130 + 80
7    300.0  	# 130 + 80 + 90
8    270.0  	# 80 + 90 + 100
9    340.0  	# 90 + 100 + 150
dtype: float64
"""

logging.info("------------------------------滑动求3列的和-agg---------------------------")

# 和上面的sum等价
agg_3_window = amount.rolling(3).agg(
    # 里面的参数x就是每个窗口里面的元素组成的Series对象
    lambda x: sum(x)
)

print(agg_3_window)

logging.info("--------------滑动求3列的和-sum-设置窗口最小间隔,使原本为NaN的前两个值,拥有了值-----------------")
print(amount.rolling(3, min_periods=1).sum())  # min_periods,就是窗口最小间隔

"""
0    100.0  	# NaN + NaN + 100
1    190.0  	# NaN + 100 + 90
2    300.0  	# 100 + 90 + 110
3    350.0  	# 90 + 110 + 150
4    370.0  	# 110 + 150 + 110
5    390.0  	# 150 + 110 + 130
6    320.0  	# 110 + 130 + 80
7    300.0  	# 130 + 80 + 90
8    270.0  	# 80 + 90 + 100
9    340.0  	# 90 + 100 + 150
dtype: float64
"""


logging.info("--------------从默认的窗口向后滑动,改为以当前窗口为中心,向两边滑动------------------------")
# center的（奇数）表现： 长度为3，除去本身之外，再往上选1个、往下选1个,一共3个
# center的（偶数）表现： 长度为8，这个时候会往上选4个、往下选3个，一共8个
# 会使得开头出现一个NaN，结尾出现一个NaN (因为开头和结尾的元素，加起来不够3个，所以是NaN)
print(amount.rolling(3, center=True).sum())


logging.info("--------------用rolling解决日期相关问题------------------------")
amount = pd.Series(
    [100, 100, 100, 100, 100, 100, 100, 100, 100, 100],
    index=pd.DatetimeIndex(
        [
            "2020-1-1",
            "2020-1-3",
            "2020-1-4",
            "2020-1-6",
            "2020-1-7",
            "2020-1-9",
            "2020-1-12",
            "2020-1-13",
            "2020-1-14",
            "2020-1-15",
        ]
    ),
)

# 3天之内的总和，时间进行移动分析的话，那么要求索引必须是datetime
print(amount)
print(amount.rolling("3D").sum())
"""
2020-01-01    100.0
2020-01-03    200.0  # 01-01 01-03
2020-01-04    200.0
2020-01-06    200.0
2020-01-07    200.0
2020-01-09    200.0
2020-01-12    100.0
2020-01-13    200.0
2020-01-14    300.0 # 01-12 01-13 01-14
2020-01-15    300.0 # 01-13 01-14 01-15
dtype: float64
"""
